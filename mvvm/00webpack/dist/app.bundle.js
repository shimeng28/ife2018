!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=14)}([function(e,t,n){var r;r=function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/dist",n(n.s=6)}([function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e,t){var n=(0,o.default)(e),r=(0,o.default)(t),i=n.path;if(0===i.indexOf("/"))return e;var s=i.split("/"),a=r.path.split("/");a.pop();for(var c=0;c<s.length;c++){var p=s[c];switch(p){case"..":a.pop();break;case".":break;default:a.push(p)}}""!==a[0]&&a.unshift("");return a.join("/")+(n.queryString?"?"+n.queryString:"")};var r,i=n(1),o=(r=i)&&r.__esModule?r:{default:r}},function(e,t,n){"use strict";t.__esModule=!0,t.default=function(e){var t={hash:"",queryString:"",params:{},query:{},path:e},n=t.path.indexOf("#");n>=0&&(t.hash=t.path.slice(n+1),t.path=t.path.slice(0,n));var r=t.query,i=t.path.indexOf("?");i>=0&&(t.queryString=t.path.slice(i+1),t.path=t.path.slice(0,i),t.queryString.split("&").forEach(function(e){var t=e.indexOf("="),n="";t>0&&(n=e.slice(t+1),e=e.slice(0,t));var i=decodeURIComponent(e);n=decodeURIComponent(n),r.hasOwnProperty(i)?r[i]=[].concat(r[i],n):r[i]=n}));return t}},function(e,t,n){"use strict";t.__esModule=!0;var r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return e.prototype.on=function(e,t){"function"==typeof t&&(this._eventListeners||(this._eventListeners={}),this._eventListeners[e]||(this._eventListeners[e]=[]),this._eventListeners[e].push(t))},e.prototype.un=function(e,t){if(this._eventListeners&&this._eventListeners[e])if(t)for(var n=this._eventListeners[e],r=n.length;r--;)n[r]===t&&n.splice(r,1);else this._eventListeners[e]=[]},e.prototype.fire=function(e,t){if(!e)throw new Error("No event type specified");var n=this._eventListeners&&this._eventListeners[e];if(n)for(var r=0;r<n.length;r++)n[r](t)},e}();t.default=r},function(e,t,n){"use strict";t.__esModule=!0;var r,i=n(6),o=n(0),s=(r=o)&&r.__esModule?r:{default:r};t.default={template:'<a href="{{href}}"\n        onclick="return false;"\n        on-click="clicker($event)"\n        target="{{target}}"\n        class="{{class}}"\n        style="{{style}}"\n        >\n        <slot></slot>\n    </a>',clicker:function(e){var t=this.data.get("href");"string"==typeof t&&i.router.locator.redirect(t.replace(/^#/,"")),e.preventDefault?e.preventDefault():e.returnValue=!1},computed:{href:function(){var e=this.data.get("to");if("string"==typeof e){var t=(0,s.default)(e,i.router.locator.current);return"hash"===i.router.mode&&(t="#"+t),t}}}}},function(e,t,n){"use strict";t.__esModule=!0;var r=o(n(2)),i=o(n(0));function o(e){return e&&e.__esModule?e:{default:e}}function s(){var e=location.href.indexOf("#");return e<0?"/":location.href.slice(e+1)||"/"}var a=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this));return n.current=s(),n.referrer="",n.hashChangeHandler=function(){n.redirect(s())},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.start=function(){window.addEventListener&&window.addEventListener("hashchange",this.hashChangeHandler,!1),window.attachEvent&&window.attachEvent("onhashchange",this.hashChangeHandler)},t.prototype.stop=function(){window.removeEventListener&&window.removeEventListener("hashchange",this.hashChangeHandler,!1),window.detachEvent&&window.detachEvent("onhashchange",this.hashChangeHandler)},t.prototype.redirect=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{force:!1};e=(0,i.default)(e,this.current);var n=this.current,r=e!==n;r?(this.referrer=n,this.current=e,location.hash=e):n=this.referrer,!r&&!t.force||t.silent||this.fire("redirect",{url:e,referrer:n})},t.prototype.reload=function(){this.redirect(this.current,{force:!0})},t}(r.default);t.default=a},function(e,t,n){"use strict";t.__esModule=!0;var r=o(n(2)),i=o(n(0));function o(e){return e&&e.__esModule?e:{default:e}}function s(){return location.pathname+location.search}var a=function(e){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this));return n.current=s(),n.referrer="",n.popstateHandler=function(){n.referrer=n.current,n.current=s(),n.fire("redirect",{url:n.current,referrer:n.referrer})},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.start=function(){window.addEventListener("popstate",this.popstateHandler)},t.prototype.stop=function(){window.removeEventListener("popstate",this.popstateHandler)},t.prototype.redirect=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{force:!1};e=(0,i.default)(e,this.current);var n=this.current,r=e!==n;r&&(this.referrer=n,this.current=e,history.pushState({},"",e)),!r&&!t.force||t.silent||this.fire("redirect",{url:e,referrer:n})},t.prototype.reload=function(){this.fire("redirect",{url:this.current,referrer:this.referrer})},t}(r.default);t.default=a,a.isSupport="pushState"in window.history},function(e,t,n){"use strict";t.__esModule=!0,t.Link=t.router=t.Router=t.version=void 0;var r=c(n(4)),i=c(n(5)),o=c(n(1)),s=c(n(3)),a=c(n(7));function c(e){return e&&e.__esModule?e:{default:e}}var p=365611;function h(e){return e.prototype&&(5===e.prototype.nodeType||"san-cmpt"===e.prototype._type)}t.version="1.2.0";var l=t.Router=function(){function e(){var t=this,n=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).mode,r=void 0===n?"hash":n;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.routes=[],this.routeAlives=[],this.listeners=[],this.locatorRedirectHandler=function(e){for(var n=(0,o.default)(e.url),r=void 0,i=0;i<t.routes.length;i++){var s=t.routes[i],a=s.rule.exec(n.path);if(a){r=s;for(var c=s.keys||[],p=1;p<a.length;p++){var h=c[p]||p,l=a[p];n.query[h]=l,n.params[h]=l}n.referrer=e.referrer,n.config=s.config;break}}var u=0,f=1,d={hash:n.hash,queryString:n.queryString,query:n.query,path:n.path,referrer:n.referrer,config:n.config,resume:m,suspend:function(){f=0},stop:function(){f=-1}},v=function(){f>0&&(u<t.listeners.length?(t.listeners[u].call(t,d,n.config),f>0&&m()):y())};function m(){f=1,u++,v()}var y=function(){if(r)t.doRoute(r,n);else for(var e=t.routeAlives.length;e--;)t.routeAlives[e].component.dispose(),t.routeAlives.splice(e,1)};v()},this.setMode(r)}return e.prototype.listen=function(e){this.listeners.push(e)},e.prototype.unlisten=function(e){for(var t=this.listeners.length;t--;)this.listeners[t]===e&&this.listeners.splice(t,1)},e.prototype.doRoute=function(e,t){for(var n=this,r=!1,i=this.routeAlives.length;i--;){var o=this.routeAlives[i];o.id===e.id?(o.component.data.set("route",t),o.component._callHook("route"),r=!0):(o.component.dispose(),this.routeAlives.splice(i,1))}r||(e.Component?h(e.Component)?this.attachCmpt(e,t):e.Component().then(function(r){h(r)?e.Component=r:r.__esModule&&h(r.default)&&(e.Component=r.default),n.attachCmpt(e,t)}):e.handler.call(this,t))},e.prototype.attachCmpt=function(e,t){var n=new e.Component;n.data.set("route",t),n._callHook("route");var r=e.target,i=(0,a.default)(r);if(!i)throw new Error('[SAN-ROUTER ERROR] Attach failed, target element "'+e.target+'" is not found.');n.attach(i),this.routeAlives.push({component:n,id:e.id})},e.prototype.add=function(e){var t=e.rule,n=e.handler,r=e.target,i=void 0===r?"#main":r,o=e.Component,s=[""];if("string"==typeof t){var a=t.replace(/\/:([a-z0-9_-]+)(?=\/|$)/gi,function(e,t){return s.push(t),"/([^/\\s]+)"});t=new RegExp("^"+a+"$","i")}if(!(t instanceof RegExp))throw new Error("[SAN-ROUTER ERROR] Rule must be string or RegExp!");var c=(++p).toString();return this.routes.push({id:c,rule:t,handler:n,keys:s,target:i,Component:o,config:e}),this},e.prototype.start=function(){return this.isStarted||(this.isStarted=!0,this.locator.on("redirect",this.locatorRedirectHandler),this.locator.start(),this.locator.reload()),this},e.prototype.stop=function(){return this.locator.un("redirect",this.locatorRedirectHandler),this.locator.stop(),this.isStarted=!1,this},e.prototype.setMode=function(e){if(e=e.toLowerCase(),this.mode!==e){this.mode=e;var t=!1;switch(this.isStarted&&(this.stop(),t=!0),e){case"hash":this.locator=new r.default;break;case"html5":this.locator=new i.default}return t&&this.start(),this}},e}();t.router=new l;t.Link=s.default},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function(e){switch(void 0===e?"undefined":r(e)){case"object":return e;case"string":return document.querySelector?document.querySelector(e):document.getElementById(e.replace(/#/i,""))}}}])},e.exports=r()},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){(function(t){!function(n){var r=1,i=(new Date).getTime().toString(16).slice(8);function o(){return"_"+i+r++}function s(){}function a(e,t){for(var n in t)if(t.hasOwnProperty(n)){var r=t[n];void 0!==r&&(e[n]=r)}return e}function c(e,t){var n=e.prototype,r=new Function;r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e,a(e.prototype,n)}function p(e,t){if(e&&e.length>0)for(var n=0,r=e.length;n<r&&!1!==t(e[n],n);n++);}function h(e,t){var n=Function.prototype.bind,r=Array.prototype.slice;if(n&&e.bind===n)return n.apply(e,r.call(arguments,1));var i=r.call(arguments,2);return function(){return e.apply(t,i.concat(r.call(arguments)))}}function l(e,t,n,r){e.addEventListener?e.addEventListener(t,n,r):e.attachEvent("on"+t,n)}function u(e){var t={};return p(e.split(","),function(e){t[e]=1}),t}var f=u("svg,g,defs,desc,metadata,symbol,use,image,path,rect,circle,line,ellipse,polyline,polygon,text,tspan,tref,textpath,marker,pattern,clippath,mask,filter,cursor,view,animate,font,font-face,glyph,missing-glyph");function d(e){return f[e]?document.createElementNS("http://www.w3.org/2000/svg",e):document.createElement(e)}function v(e){e&&e.parentNode&&e.parentNode.removeChild(e)}var m,y=[],g="function"==typeof Promise&&/native code/.test(Promise);function w(e,n){if(n&&(e=h(e,n)),y.push(e),!m)if(m=function(){var e=y.slice(0);y=[],m=null;for(var t=0,n=e.length;t<n;t++)e[t]()},"function"==typeof t)t(m);else if("function"==typeof MessageChannel){var r=new MessageChannel,i=r.port2;r.port1.onmessage=m,i.postMessage(1)}else g?Promise.resolve().then(m):setTimeout(m,0)}var x="undefined"!=typeof navigator&&navigator.userAgent.match(/msie\s*([0-9]+)/i),N=x?x[1]-0:0,b=N&&N<9;function E(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}9===N&&l(document,"selectionchange",function(){var e=document.activeElement;"TEXTAREA"!==e.tagName&&"INPUT"!==e.tagName||E(e,"input")});var R=u("area,base,br,col,embed,hr,img,input,keygen,param,source,track,wbr"),C="<<anonymous>>";function T(e){return e&&1===e.nodeType?"element":Object.prototype.toString.call(e).slice(8,-1).toLowerCase()}function _(e){var t=function(){};t.isRequired=s;var n=function(t,n,r,i,o){var s=n[r],a=T(s);if(i=i||C,null!=s)e(n,r,i,o);else if(t)throw new Error("[SAN ERROR] The `"+r+"` is marked as required in `"+i+"`, but its value is "+a)};return(t=h(n,null,!1)).isRequired=h(n,null,!0),t}function S(e){return _(function(t,n,r,i){var o=T(t[n]);if(o!==e)throw new Error("[SAN ERROR] Invalid "+r+" data `"+i+"` of type("+o+" supplied to "+r+", expected "+e+")")})}var A=(_(s),_(s),_(s),_(s),_(s),_(s),_(s));function O(e){this.source=e,this.len=this.source.length,this.index=0}function k(e){return(e=e||{}).textExpr||(e.directives=e.directives||{},e.props=e.props||[],e.events=e.events||[],e.children=e.children||[]),e}function I(e){return e.replace(/-([a-z])/g,function(e,t){return t.toUpperCase()})}A={any:_(s),array:S("array"),object:S("object"),func:S("function"),string:S("string"),number:S("number"),bool:S("boolean"),symbol:S("symbol"),arrayOf:function(e){return _(function(t,n,r,i){if("function"!=typeof e)throw new Error("[SAN ERROR] Data `"+n+"` of `"+r+"` has invalid DataType notation inside `arrayOf`, expected `function`");var o=t[n],s=T(o);if("array"!==s)throw new Error("[SAN ERROR] Invalid "+r+" data `"+i+"` of type("+s+" supplied to "+r+", expected array)");for(var a=0,c=o.length;a<c;a++)e(o,a,r,i+"["+a+"]")})},instanceOf:function(e){return _(function(t,n,r,i){var o=t[n];if(!(o instanceof e)){var s=o.constructor&&o.constructor.name?o.constructor.name:C,a=e.name||C;throw new Error("[SAN ERROR] Invalid "+r+" data `"+i+"` of type("+s+" supplied to "+r+", expected instance of "+a+")")}})},shape:function(e){return _(function(t,n,r,i){if("object"!==T(e))throw new Error("[SAN ERROR] Data `"+i+"` of `"+r+"` has invalid DataType notation inside `shape`, expected `object`");var o=t[n],s=T(o);if("object"!==s)throw new Error("[SAN ERROR] Invalid "+r+" data `"+i+"` of type("+s+" supplied to "+r+", expected object)");for(var a in e)if(e.hasOwnProperty(a)){var c=e[a];"function"==typeof c&&c(o,a,r,i+"."+a)}})},oneOf:function(e){return _(function(t,n,r,i){if("array"!==T(e))throw new Error("[SAN ERROR] Data `"+i+"` of `"+r+"` has invalid DataType notation inside `oneOf`, array is expected.");for(var o=t[n],s=0,a=e.length;s<a;s++)if(o===e[s])return;throw new Error("[SAN ERROR] Invalid "+r+" data `"+i+"` of value(`"+o+"` supplied to "+r+", expected one of "+e.join(",")+")")})},oneOfType:function(e){return _(function(t,n,r,i){if("array"!==T(e))throw new Error("[SAN ERROR] Data `"+n+"` of `"+r+"` has invalid DataType notation inside `oneOf`, array is expected.");for(var o=t[n],s=0,a=e.length;s<a;s++){var c=e[s];if("function"==typeof c)try{return void c(t,n,r,i)}catch(e){}}throw new Error("[SAN ERROR] Invalid "+r+" data `"+n+"` of value(`"+o+"` supplied to "+r+")")})},objectOf:function(e){return _(function(t,n,r,i){if("function"!=typeof e)throw new Error("[SAN ERROR] Data `"+n+"` of `"+r+"` has invalid DataType notation inside `objectOf`, expected function");var o=t[n],s=T(o);if("object"!==s)throw new Error("[SAN ERROR] Invalid "+r+" data `"+n+"` of type("+s+" supplied to "+r+", expected object)");for(var a in o)o.hasOwnProperty(a)&&e(o,a,r,i+"."+a)})},exact:function(e){return _(function(t,n,r,i,o){if("object"!==T(e))throw new Error("[SAN ERROR] Data `"+n+"` of `"+r+"` has invalid DataType notation inside `exact`");var s=t[n],c=T(s);if("object"!==c)throw new Error("[SAN ERROR] Invalid data `"+i+"` of type `"+c+"`(supplied to "+r+", expected `object`)");var p={};for(var h in a(p,e),a(p,s),p)if(p.hasOwnProperty(h)){var l=e[h];if(!l)throw new Error("[SAN ERROR] Invalid data `"+i+"` key `"+h+"` supplied to `"+r+"`. (`"+h+"` is not defined in `DataTypes.exact`)");if(!(h in s))throw new Error("[SAN ERROR] Invalid data `"+i+"` key `"+h+"` supplied to `"+r+"`. (`"+h+"` is marked `required` in `DataTypes.exact`)");l(s,h,r,i+"."+h,o)}})}},O.prototype.currentCode=function(){return this.charCode(this.index)},O.prototype.cut=function(e,t){return this.source.slice(e,t)},O.prototype.go=function(e){this.index+=e},O.prototype.nextCode=function(){return this.go(1),this.currentCode()},O.prototype.charCode=function(e){return this.source.charCodeAt(e)},O.prototype.goUntil=function(e){for(var t;this.index<this.len&&(t=this.currentCode());)switch(t){case 32:case 9:this.index++;break;default:return t===e?(this.index++,1):void 0}},O.prototype.match=function(e){e.lastIndex=this.index;var t=e.exec(this.source);return t&&(this.index=e.lastIndex),t};var L={STRING:1,NUMBER:2,BOOL:3,ACCESSOR:4,INTERP:5,CALL:6,TEXT:7,BINARY:8,UNARY:9,TERTIARY:10,OBJECT:11,ARRAY:12};function P(e){return{type:L.ACCESSOR,paths:e}}function j(e){return e.match(/\s*([\$0-9a-z_]+)/gi)[1]}function M(e){var t=function e(t){var n=function e(t){var n=function(e){var t=$(e);e.goUntil();var n=e.currentCode();switch(n){case 61:case 33:if(61===e.nextCode())return n+=61,61===e.nextCode()&&(n+=61,e.go(1)),{type:L.BINARY,operator:n,segs:[t,$(e)]};e.go(-1)}return t}(t);t.goUntil();if(38===t.currentCode()){if(38===t.nextCode())return t.go(1),{type:L.BINARY,operator:76,segs:[n,e(t)]};t.go(-1)}return n}(t);t.goUntil();if(124===t.currentCode()){if(124===t.nextCode())return t.go(1),{type:L.BINARY,operator:248,segs:[n,e(t)]};t.go(-1)}return n}(e);if(e.goUntil(),63===e.currentCode()){e.go(1);var n=M(e);if(e.goUntil(),58===e.currentCode())return e.go(1),{type:L.TERTIARY,segs:[t,n,M(e)]}}return t}function U(e){var t=j(e);switch(t){case"true":case"false":return{type:L.BOOL,value:"true"===t}}var n=P([{type:L.STRING,value:t}]);e:for(;;)switch(e.currentCode()){case 46:e.go(1),n.paths.push({type:L.STRING,value:j(e)});break;case 91:e.go(1),n.paths.push(M(e)),e.goUntil(93);break;default:break e}return n}function D(e){switch(e.goUntil(),e.currentCode()){case 33:return e.go(1),{type:L.UNARY,expr:D(e)};case 34:case 39:return function(e){var t,n=e.currentCode(),r=e.index;e:for(;t=e.nextCode();)switch(t){case 92:e.go(1);break;case n:e.go(1);break e}var i=e.cut(r,e.index);return{type:L.STRING,value:new Function("return "+i)()}}(e);case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return function(e){var t=e.match(/\s*(-?[0-9]+(\.[0-9]+)?)/g);return{type:L.NUMBER,value:+t[1]}}(e);case 40:return function(e){e.go(1);var t=M(e);return e.goUntil(41),t}(e);case 91:e.go(1);for(var t=[];!e.goUntil(93);){var n={};t.push(n),46===e.currentCode()&&e.match(/\.\.\.\s*/g)&&(n.spread=!0),n.expr=M(e),e.goUntil(44)}return{type:L.ARRAY,items:t};case 123:e.go(1);for(var r=[];!e.goUntil(125);){n={};r.push(n),46===e.currentCode()&&e.match(/\.\.\.\s*/g)?(n.spread=!0,n.expr=M(e)):(n.name=D(e),e.goUntil(58)?n.expr=M(e):n.expr=n.name,n.name.type===L.ACCESSOR&&(n.name=n.name.paths[0])),e.goUntil(44)}return{type:L.OBJECT,items:r}}return U(e)}function B(e){for(var t=D(e);;){e.goUntil();var n=e.currentCode();switch(n){case 37:case 42:case 47:e.go(1),t={type:L.BINARY,operator:n,segs:[t,D(e)]};continue}break}return t}function F(e){for(var t=B(e);;){e.goUntil();var n=e.currentCode();switch(n){case 43:case 45:e.go(1),t={type:L.BINARY,operator:n,segs:[t,B(e)]};continue}break}return t}function $(e){var t=F(e);e.goUntil();var n=e.currentCode();switch(n){case 60:case 62:return 61===e.nextCode()&&(n+=61,e.go(1)),{type:L.BINARY,operator:n,segs:[t,F(e)]}}return t}function H(e){if("object"==typeof e&&e.type)return e;var t=M(new O(e));return t.raw=e,t}function Y(e,t){e.goUntil();var n=U(e),r=[];if(e.goUntil(40))for(;!e.goUntil(41);)r.push(M(e)),e.goUntil(44);else t&&(r=t);return{type:L.CALL,name:n,args:r}}function q(e,t){var n=Y(new O(e),t);return n.raw=e,n}function G(e){for(var t=new O(e),n={type:L.INTERP,expr:M(t),filters:[],raw:e};t.goUntil(124);){var r=Y(t);switch(r.name.paths[0].value){case"html":break;case"raw":n.original=1;break;default:n.filters.push(r)}}return n}var z={lt:"<",gt:">",nbsp:" ",quot:'"',emsp:" ",ensp:" ",thinsp:" ",copy:"©",reg:"®",zwnj:"‌",zwj:"‍",amp:"&"};function W(e){return e.replace(/[\^\[\]\$\(\)\{\}\?\*\.\+\\]/g,function(e){return"\\"+e})}function X(e,t){t=t||["{{","}}"];var n,r=new RegExp(W(t[0])+"\\s*([\\s\\S]+?)\\s*"+W(t[1]),"ig"),i=new O(e),o=0,s={type:L.TEXT,segs:[]};function a(e){var t;e&&s.segs.push({type:L.STRING,literal:e,value:(t=e,t.replace(/&#([0-9]+);/g,function(e,t){return String.fromCharCode(+t)}).replace(/&#x([0-9a-f]+);/gi,function(e,t){return String.fromCharCode(parseInt(t,16))}).replace(/&([a-z]+);/gi,function(e,t){return z[t]||e}))})}for(var c=t[1].length;null!=(n=i.match(r));){var p=n[1],h=n[0].length;i.cut(i.index+1-c,i.index+1)===t[1]&&(p+=i.cut(i.index,i.index+1),i.go(1),h++),a(i.cut(o,i.index-h));var l=G(p);s.original=s.original||l.original,s.segs.push(l),o=i.index}return a(i.cut(o)),1===s.segs.length&&s.segs[0].type===L.STRING&&(s.value=s.segs[0].value),s}var J={for:function(e){var t=new O(e),n=t.match(/^\s*([\$0-9a-z_]+)(\s*,\s*([\$0-9a-z_]+))?\s+in\s+/gi);if(n)return{item:H(n[1]),index:H(n[3]||"$index"),value:U(t)};throw new Error("[SAN FATAL] for syntax error: "+e)},ref:function(e,t){return{value:X(e,t.delimiters)}},if:function(e){return{value:H(e.replace(/(^\{\{|\}\}$)/g,""))}},elif:function(e){return{value:H(e.replace(/(^\{\{|\}\}$)/g,""))}},else:function(e){return{value:{}}},bind:function(e){return{value:H(e.replace(/(^\{\{|\}\}$)/g,""))}},html:function(e){return{value:H(e.replace(/(^\{\{|\}\}$)/g,""))}},transition:function(e){return{value:q(e)}}};function V(e){var t=e.expr;if(t.type===L.TEXT)switch(t.segs.length){case 0:e.expr={type:L.BOOL,value:!0};break;case 1:(t=e.expr=t.segs[0]).type===L.INTERP&&0===t.filters.length&&(e.expr=t.expr)}}function K(e,t,n,r){var i,o,s=t.indexOf("-");switch(s>0&&(o=t.slice(0,s),i=t.slice(s+1)),o){case"on":var a,c={name:i,modifier:{}};for(e.events.push(c);(a=n.indexOf(":"))>0;){var p=n.slice(0,a);if(!/^[a-z]+$/i.test(p))break;c.modifier[p]=!0,n=n.slice(a+1)}c.expr=q(n,[P([{type:L.STRING,value:"$event"}])]);break;case"san":case"s":!function(e,t,n,r){"else-if"===t&&(t="elif");var i=J[t];i&&((e.directives[t]=i(n,r)).raw=n)}(e,i,n,r);break;case"prop":Q(e,i,n,r);break;case"var":e.vars||(e.vars=[]),i=I(i),e.vars.push({name:i,expr:H(n.replace(/(^\{\{|\}\}$)/g,""))});break;default:Q(e,t,n,r)}}function Q(e,t,n,r){var i=n.match(/^\{=\s*(.*?)\s*=\}$/);if(i)e.props.push({name:t,expr:H(i[1]),x:1,raw:n});else{var o={name:t,expr:X(n,r.delimiters),raw:n};switch(t){case"class":case"style":p(o.expr.segs,function(e){e.type===L.INTERP&&e.filters.push({type:L.CALL,name:P([{type:L.STRING,value:"_"+o.name}]),args:[]})});break;case"checked":"input"===e.tagName&&V(o)}e.props.push(o)}}function Z(e,t){for(var n=["ROOT"],r=1,i=e.length;r<i;r++)n.push(e[r].tagName);return t&&n.push(t),n.join(">")}function ee(e,t){(t=t||{}).trimWhitespace=t.trimWhitespace||"none";var n=k();if("string"!=typeof e)return n;for(var r,i=new O(e=e.replace(/<!--([\s\S]*?)-->/gm,"").replace(/(^\s+|\s+$)/g,"")),o=/<(\/)?([a-z0-9-]+)\s*/gi,s=/([-:0-9a-z\(\)\[\]]+)(\s*=\s*(['"])([^\3]*?)\3)?\s*/gi,a=n,c=[n],p=0,h=0;null!=(r=i.match(o));){var l=r[1],u=r[2].toLowerCase();if(N(e.slice(h,i.index-r[0].length)),l&&62===i.currentCode()){var f=p;if(R[u])throw new Error("[SAN ERROR] "+Z(c,u)+" is a `auto closed` tag, so it cannot be closed with </"+u+">");if(c[f].tagName!==u&&("table"!==u||"tbody"!==c[f].tagName))throw new Error("[SAN ERROR] "+Z(c)+" is closed with "+u);for(;f>0&&c[f].tagName!==u;)f--;f>0&&(a=c[p=f-1]),i.go(1)}else{if(l){if(60===i.currentCode())throw new Error("[SAN ERROR] "+Z(c)+"'s close tag not closed");throw new Error("[SAN ERROR] "+Z(c)+"'s close tag has attributes")}if(!l){for(var d=k({tagName:u}),v=R[u];;){var m=i.currentCode();if(62===m){i.go(1);break}if(47===m&&62===i.charCode(i.index+1)){i.go(2),v=1;break}if(60===m)throw new Error("[SAN ERROR] "+Z(c,u)+" is not closed");var y=i.match(s);if(y){if(61===i.charCode(y.index+y[1].length)&&!y[2])throw new Error("[SAN ERROR] "+Z(c,u)+" attribute `"+y[1]+'` is not wrapped with ""');K(d,y[1],y[2]?y[4]:"",t)}}if(d.directives.else||d.directives.elif)for(var g=a.children.length;g--;){var w=a.children[g];if(!w.textExpr){if(!w.directives.if)throw new Error("[SAN FATEL] else not match if.");w.elses=w.elses||[],w.elses.push(d);break}a.children.splice(g,1)}else{if("tr"===d.tagName&&"table"===a.tagName){var x=k({tagName:"tbody"});a.children.push(x),a=x,c[++p]=x}a.children.push(d)}v||(a=d,c[++p]=d)}}h=i.index}return N(i.cut(h)),n;function N(e){switch(t.trimWhitespace){case"blank":/^\s+$/.test(e)&&(e=null);break;case"all":e=e.replace(/(^\s+|\s+$)/g,"")}e&&a.children.push(k({textExpr:X(e,t.delimiters)}))}}var te={url:encodeURIComponent,_class:function(e){return e instanceof Array?e.join(" "):e},_style:function(e){if("object"==typeof e){var t="";for(var n in e)t+=n+":"+e[n]+";";return t}return e},_sep:function(e,t){return e?t+e:e}};function ne(e,t,n){if(null!=e.value)return e.value;var r=se.get(t,e);if(null==r){switch(e.type){case L.UNARY:r=!ne(e.expr,t,n);break;case L.BINARY:var i=ne(e.segs[0],t,n),o=ne(e.segs[1],t,n);switch(e.operator){case 37:r=i%o;break;case 43:r=i+o;break;case 45:r=i-o;break;case 42:r=i*o;break;case 47:r=i/o;break;case 60:r=i<o;break;case 62:r=i>o;break;case 76:r=i&&o;break;case 94:r=i!=o;break;case 121:r=i<=o;break;case 122:r=i==o;break;case 123:r=i>=o;break;case 155:r=i!==o;break;case 183:r=i===o;break;case 248:r=i||o}break;case L.TERTIARY:r=ne(e.segs[ne(e.segs[0],t,n)?1:2],t,n);break;case L.ARRAY:r=[];for(var s=0,c=e.items.length;s<c;s++){var p=ne((h=e.items[s]).expr,t,n);h.spread?p&&(r=r.concat(p)):r.push(p)}break;case L.OBJECT:r={};for(s=0,c=e.items.length;s<c;s++){var h;p=ne((h=e.items[s]).expr,t,n);h.spread?p&&a(r,p):r[ne(h.name,t,n)]=p}break;case L.ACCESSOR:r=t.get(e);break;case L.INTERP:if(r=ne(e.expr,t,n),n)for(s=0,c=e.filters.length;s<c;s++){var l=e.filters[s],u=l.name.paths[0].value;n.filters[u]?r=n.filters[u].apply(n,[r].concat(re(l.args,t,n))):te[u]&&(r=te[u](r,l.args[0]?l.args[0].value:""))}null==r&&(r="");break;case L.TEXT:var f="";for(s=0,c=e.segs.length;s<c;s++){var d=e.segs[s];f+=d.value||ne(d,t,n)}return f}se.set(t,e,r)}return r}function re(e,t,n){for(var r=[],i=0;i<e.length;i++)r.push(ne(e[i],t,n));return r}var ie={},oe=1,se={clear:function(){oe||(oe=1,ie={})},set:function(e,t,n){t.raw&&(oe=0,(ie[e.id]=ie[e.id]||{})[t.raw]=n)},get:function(e,t){if(t.raw&&ie[e.id])return ie[e.id][t.raw]}};function ae(e,t,n){for(var r=0,i=t.length;r<i;r++)if(ce(e,t[r],n))return 1;return 0}function ce(e,t,n){switch(t.type){case L.ACCESSOR:for(var r=t.paths,i=r.length,o=e.paths,s=o.length,a=1,c=0;c<i;c++){var h=r[c];if(h.type===L.ACCESSOR&&ce(e,h,n))return 1;a&&c<s&&(h.value||ne(h,n))!=(o[c].value||ne(o[c],n))&&(a=0)}return a&&(a=Math.max(1,s-i+2)),a;case L.UNARY:return ce(e,t.expr,n)?1:0;case L.TEXT:case L.BINARY:case L.TERTIARY:return ae(e,t.segs,n);case L.ARRAY:case L.OBJECT:c=0;for(var l=t.items.length;c<l;c++)if(ce(e,t.items[c].expr,n))return 1;return 0;case L.INTERP:var u;return ce(e,t.expr,n)?1:(p(t.filters,function(t){return!(u=ae(e,t.args,n))}),u?1:0)}return 0}var pe=1,he=2;function le(e){return this[e]}var ue={start:{},compiled:{is:le,compiled:!0},inited:{is:le,compiled:!0,inited:!0},created:{is:le,compiled:!0,inited:!0,created:!0},attached:{is:le,compiled:!0,inited:!0,created:!0,attached:!0},leaving:{is:le,compiled:!0,inited:!0,created:!0,attached:!0,leaving:!0},detached:{is:le,compiled:!0,inited:!0,created:!0,detached:!0},disposed:{is:le,disposed:!0}},fe={TEXT:1,IF:2,FOR:3,ELEM:4,CMPT:5,SLOT:6,TPL:7};function de(e,t){var n=e.hotspot.props[t];if(null!=n)return e.props[n]}var ve={readonly:"readOnly",cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",rowspan:"rowSpan",valign:"vAlign",usemap:"useMap",frameborder:"frameBorder",for:"htmlFor"},me={prop:function(e,t,n,r){var i=ve[n]||n;t=null==t?"":t,i in e?e[i]=t:e.setAttribute(n,t)},output:function(e,t,n){n.set(t.expr,e.el[t.name],{target:{id:e.id,prop:t.name}})}},ye={prop:function(e,t,n){e.setAttribute(n,t)}},ge={prop:function(e,t,n,r,i){e[ve[n]||n]=!!(i&&""===i.raw||t&&"false"!==t&&"0"!==t)}},we={style:{prop:function(e,t){e.style.cssText=t}},class:{prop:function(e,t){e.className=t}},slot:{prop:s},readonly:ge,disabled:ge,autofocus:ge,required:ge,draggable:ge},xe={checkbox:function(e,t){var n=!1;return p(e,function(e){return!(n=e===t)}),n},radio:function(e,t){return e===t}};var Ne={input:{multiple:ge,checked:{prop:function(e,t,n,r){var i=function(e,t,n){var r=de(e.aNode,"value"),i=de(e.aNode,"type");if(r&&i){var o=ne(i.expr,e.scope,e.owner);if(xe[o]){var s=de(e.aNode,"checked");return s.hintExpr||(s.hintExpr=r.expr),!!xe[o](t,ne(r.expr,e.scope,e.owner))}}}(r,t);ge.prop(e,null!=i?i:t,"checked",r)},output:function(e,t,n){var r=e.el,i=de(e.aNode,"value"),o=de(e.aNode,"type")||{};if(i&&o)switch(o.raw){case"checkbox":return void n[r.checked?"push":"remove"](t.expr,r.value);case"radio":return void(r.checked&&n.set(t.expr,r.value,{target:{id:e.id,prop:t.name}}))}me.output(e,t,n)}}},option:{value:{prop:function(e,t,n,r){me.prop(e,t,n,r),function(e,t){var n=e.parent;for(;n&&"select"!==n.tagName;)n=n.parent;if(n){var r,i,o=null;if((r=de(n.aNode,"value"))&&(i=r.expr)&&(o=n.nodeType===fe.CMPT?ne(i,n.data,n):ne(i,n.scope,n.owner)||""),o===t)return 1}}(r,t)&&(e.selected=!0)}}},select:{value:{prop:function(e,t){e.value=t||""},output:me.output}}};function be(e,t){if(f[e])return ye;var n=Ne[e];n||(n=Ne[e]={});var r=n[t];return r||(r=we[t]||me,n[t]=r),r}function Ee(e,t,n){var r=e.option.target;return r&&r.id===t.id&&(!n||r.prop===n)}function Re(e,t,n){for(var r=e,i=0;null!=r&&i<t.paths.length;i++)r=r[ne(t.paths[i],n)];return r}function Ce(e,t){this.id=o(),this.parent=t,this.raw=e||{},this.listeners=[]}function Te(e,t,n,r){if(0===t.length)return n;var i,o=ne(t[0],r);if(e instanceof Array){var s=+o;return(i=e.slice(0))[isNaN(s)?o:s]=Te(e[s],t.slice(1),n,r),i}if("object"==typeof e){for(var a in i={},e)a!==o&&(i[a]=e[a]);return i[o]=Te(e[o]||{},t.slice(1),n,r),i}return e}function _e(e,t,n,r){var i=Re(this,e.expr.name,n);if("function"==typeof i){var o=new Ce({$event:t?r:r||window.event},n);i.apply(this,re(e.expr.args,o,this))}}Ce.prototype.checkDataTypes=function(){this.typeChecker&&this.typeChecker(this.raw)},Ce.prototype.setTypeChecker=function(e){this.typeChecker=e},Ce.prototype.listen=function(e){"function"==typeof e&&this.listeners.push(e)},Ce.prototype.unlisten=function(e){for(var t=this.listeners.length;t--;)e&&this.listeners[t]!==e||this.listeners.splice(t,1)},Ce.prototype.fire=function(e){if(!(e.option.silent||e.option.silence||e.option.quiet))for(var t=0;t<this.listeners.length;t++)this.listeners[t].call(this,e)},Ce.prototype.get=function(e,t){var n=this.raw;if(!e)return n;var r=(e=H(e)).paths;if(t=t||this,null==(n=n[r[0].value])&&this.parent)n=this.parent.get(e,t);else for(var i=1,o=r.length;null!=n&&i<o;i++)n=n[r[i].value||ne(r[i],t)];return n},Ce.prototype.set=function(e,t,n){n=n||{};var r=e;if((e=H(e)).type!==L.ACCESSOR)throw new Error("[SAN ERROR] Invalid Expression in Data set: "+r);(this.get(e)!==t||n.force)&&(se.clear(),this.raw=Te(this.raw,e.paths,t,this),this.fire({type:pe,expr:e,value:t,option:n}),this.checkDataTypes())},Ce.prototype.merge=function(e,t,n){n=n||{};var r=e;if((e=H(e)).type!==L.ACCESSOR)throw new Error("[SAN ERROR] Invalid Expression in Data merge: "+r);if("object"!=typeof this.get(e))throw new Error("[SAN ERROR] Merge Expects a Target of Type 'object'; got "+typeof oldValue);if("object"!=typeof t)throw new Error("[SAN ERROR] Merge Expects a Source of Type 'object'; got "+typeof t);for(var i in t)this.set(P(e.paths.concat([{type:L.STRING,value:i}])),t[i],n)},Ce.prototype.apply=function(e,t,n){var r=e;if((e=H(e)).type!==L.ACCESSOR)throw new Error("[SAN ERROR] Invalid Expression in Data apply: "+r);var i=this.get(e);if("function"!=typeof t)throw new Error("[SAN ERROR] Invalid Argument's Type in Data apply: Expected Function but got "+typeof t);this.set(e,t(i),n)},Ce.prototype.splice=function(e,t,n){n=n||{};var r=e;if((e=H(e)).type!==L.ACCESSOR)throw new Error("[SAN ERROR] Invalid Expression in Data splice: "+r);var i=this.get(e),o=[];if(i instanceof Array){var s=t[0],a=i.length;s>a?s=a:s<0&&(s=a+s)<0&&(s=0);var c=i.slice(0);o=c.splice.apply(c,t),se.clear(),this.raw=Te(this.raw,e.paths,c,this),this.fire({expr:e,type:he,index:s,deleteCount:o.length,value:o,insertions:t.slice(2),option:n})}return this.checkDataTypes(),o},Ce.prototype.push=function(e,t,n){var r=this.get(e);if(r instanceof Array)return this.splice(e,[r.length,0,t],n),r.length+1},Ce.prototype.pop=function(e,t){var n=this.get(e);if(n instanceof Array){var r=n.length;if(r)return this.splice(e,[r-1,1],t)[0]}},Ce.prototype.shift=function(e,t){return this.splice(e,[0,1],t)[0]},Ce.prototype.unshift=function(e,t,n){var r=this.get(e);if(r instanceof Array)return this.splice(e,[0,0,t],n),r.length+1},Ce.prototype.removeAt=function(e,t,n){this.splice(e,[t,1],n)},Ce.prototype.remove=function(e,t,n){var r=this.get(e);if(r instanceof Array)for(var i=r.length;i--;)if(r[i]===t){this.splice(e,[i,1],n);break}};var Se=u("div,span,input,button,textarea,form,label,dl,dt,dd,ul,ol,li,a,b,u,h1,h2,h3,h4,h5,h6"),Ae="undefined"!=typeof window;function Oe(e,t,n){t&&(n?t.insertBefore(e,n):t.appendChild(e))}function ke(e){if("undefined"!=typeof window&&"undefined"!=typeof navigator&&window.document&&function(e){return/^(col|colgroup|frameset|style|table|tbody|tfoot|thead|tr|select)$/i.test(e.tagName)}(e)){var t='[SAN WARNING] set html for element "'+e.tagName+'" may cause an error in old IE';if("object"!=typeof console||!console.warn)throw new Error(t);console.warn(t)}}function Ie(e){for(var t=[],n=e;n;){switch(n.nodeType){case fe.ELEM:t.unshift(n.tagName);break;case fe.IF:t.unshift("if");break;case fe.FOR:t.unshift("for["+n.anode.directives.for.raw+"]");break;case fe.SLOT:t.unshift("slot["+(n.name||"default")+"]");break;case fe.TPL:t.unshift("template");break;case fe.CMPT:t.unshift("component["+(n.subTag||"root")+"]");break;case fe.TEXT:t.unshift("text")}n=n.parent}return t}function Le(e,t,n,r,i){if(this.aNode=e,this.owner=t,this.scope=n,this.parent=r,i){var o=i.current;if(o)switch(o.nodeType){case 8:if("s-text"===o.data)for(this.sel=o,o.data=this.id,i.goNext();;){if(!(o=i.current))throw new Error("[SAN REVERSE ERROR] Text end flag not found. \nPaths: "+Ie(this).join(" > "));if(a="text",8===(s=o).nodeType&&s.data==="/s-"+a){this.el=o,i.goNext(),o.data=this.id;break}i.goNext()}break;case 3:i.goNext(),this.aNode.textExpr.original||(this.el=o)}else this.el=document.createTextNode(""),Oe(this.el,i.target,i.current)}var s,a}Le.prototype.nodeType=fe.TEXT,Le.prototype.attach=function(e,t){if(this.content=ne(this.aNode.textExpr,this.scope,this.owner),this.aNode.textExpr.original){this.sel=document.createComment(this.id),Oe(this.sel,e,t),this.el=document.createComment(this.id),Oe(this.el,e,t);var n=document.createElement("script");e.insertBefore(n,this.el),n.insertAdjacentHTML("beforebegin",this.content),e.removeChild(n)}else this.el=document.createTextNode(this.content),Oe(this.el,e,t)},Le.prototype.dispose=function(){this._prev=null,this.el=null,this.sel=null};var Pe=Ae&&("string"==typeof document.createTextNode("").textContent?"textContent":"data");function je(e,t){var n=[];for(var r in e)n.push(r);for(var r in t)!e[r]&&n.push(r);return n}function Me(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(!r.overview){var i=r.expr.paths;r.overview=i[0].value,i.length>1&&(r.extOverview=i[0].value+"."+i[1].value,r.wildOverview=i[0].value+".*")}if(t[r.overview]||r.wildOverview&&t[r.wildOverview]||r.extOverview&&t[r.extOverview])return!0}}function Ue(e){this.raw=[],this.index=0,this.target=e;for(var t,n=e.firstChild;n;){switch(t=n.nextSibling,n.nodeType){case 3:/^\s*$/.test(n.data||n.textContent)?v(n):this.raw.push(n);break;case 1:case 8:this.raw.push(n)}n=t}this.current=this.raw[this.index],this.next=this.raw[this.index+1]}function De(e,t,n,r,i){if(this.aNode=e,this.owner=t,this.scope=n,this.parent=r,this.lifeCycle=ue.start,this.children=[],this._elFns=[],this.parentComponent=r.nodeType===fe.CMPT?r:r.parentComponent,this.id=o(),Nt(this),e.directives.bind&&(this._spreadData=ne(e.directives.bind.value,this.scope,this.owner)),this._toPhase("inited"),i){var s=i.current;if(!s)throw new Error("[SAN REVERSE ERROR] Element not found. \nPaths: "+Ie(this).join(" > "));if(1!==s.nodeType)throw new Error("[SAN REVERSE ERROR] Element type not match, expect 1 but "+s.nodeType+".\nPaths: "+Ie(this).join(" > "));if(s.tagName.toLowerCase()!==this.tagName)throw new Error("[SAN REVERSE ERROR] Element tagName not match, expect "+this.tagName+" but meat "+s.tagName.toLowerCase()+".\nPaths: "+Ie(this).join(" > "));this.el=s,i.goNext(),nt(this),this._attached()}}function Be(e){e.el=null,e.sel=null,e.owner=null,e.scope=null,e.aNode=null,e.parent=null,e.parentComponent=null,e.children=null,e._toPhase&&e._toPhase("disposed"),e._ondisposed&&e._ondisposed()}function Fe(e,t,n,r){var i=n.nodeType===fe.CMPT,o=i?n:n.childOwner||n.owner;if(r=r||(i?n.data:n.childScope||n.scope),e.textExpr)return new Le(e,o,r,n,t);if(e.directives.if)return new et(e,o,r,n,t);if(e.directives.for)return new Qe(e,o,r,n,t);if(Se[e.tagName])return new De(e,o,r,n,t);switch(e.tagName){case"slot":return new ze(e,o,r,n,t);case"template":return new tt(e,o,r,n,t);default:var s=o.getComponentType(e);if(s)return new s({aNode:e,owner:o,scope:r,parent:n,subTag:e.tagName,reverseWalker:t})}return new De(e,o,r,n,t)}function $e(e,t,n){for(var r=e.children,i=r&&r.length;i--;)r[i].dispose(t,n)}function He(e,t){for(var n=0,r=e.children.length;n<r;n++)e.children[n]._update(t)}function Ye(e){this.lifeCycle=ue[e]||this.lifeCycle}function qe(e,t,n){var r=t.nodeType===fe.CMPT,i=r?t:t.childOwner||t.owner;if(n=n||(r?t.data:t.childScope||t.scope),e.textExpr)return new Le(e,i,n,t);if(e.directives.if)return new et(e,i,n,t);if(e.directives.for)return new Qe(e,i,n,t);if(Se[e.tagName])return new De(e,i,n,t);switch(e.tagName){case"slot":return new ze(e,i,n,t);case"template":return new tt(e,i,n,t);default:var o=i.getComponentType(e);if(o)return new o({aNode:e,owner:i,scope:n,parent:t,subTag:e.tagName})}return new De(e,i,n,t)}function Ge(e,t){this.sel=document.createComment(this.id),Oe(this.sel,e,t),function(e,t,n){t=t||e.el;for(var r=e.aNode.children,i=0;i<r.length;i++){var o=qe(r[i],e);e.children.push(o),o.attach(t,n)}}(this,e,t),this.el=document.createComment(this.id),Oe(this.el,e,t),this._toPhase("attached")}function ze(e,t,n,r,i){var s=k();this.aNode=s,this.owner=t,this.scope=n,this.parent=r,this.parentComponent=r.nodeType===fe.CMPT?r:r.parentComponent,this.id=o(),this.lifeCycle=ue.start,this.children=[],this.nameBind=de(e,"name"),this.nameBind&&(this.isNamed=!0,this.name=ne(this.nameBind.expr,this.scope,this.owner));var a,c=t.givenSlots;c&&(a=this.isNamed?c.named[this.name]:c.noname),a&&(this.isInserted=!0),s.children=a||e.children.slice(0);var h=this;s.vars=e.vars;var l={};p(s.vars,function(e){h.isScoped=!0,l[e.name]=ne(e.expr,n,t)}),this.isInserted&&(this.childOwner=t.owner,this.childScope=t.scope),this.isScoped&&(this.childScope=new Ce(l,this.childScope||this.scope)),t.slotChildren.push(this),i&&(this.sel=document.createComment(this.id),Oe(this.sel,i.target,i.current),p(this.aNode.children,function(e){h.children.push(Fe(e,i,h))}),this.el=document.createComment(this.id),Oe(this.el,i.target,i.current),this._toPhase("attached"))}function We(e,t){var n={};for(var r in t=t||{},e)t[r]||(n[r]=e[r]);return n}function Xe(e){$e(this,e,1),e||v(this.el),Be(this)}function Je(){this.el=this.el||document.createComment(this.id)}function Ve(e,t,n){this.id=o(),this.parent=e.scope,this.raw={},this.listeners=[],this.directive=e.aNode.directives.for,this.raw[this.directive.item.raw]=t,this.raw[this.directive.index.raw]=n}function Ke(e,t,n){var r=new Ve(e,t,n);return qe(e.itemANode,e,r)}function Qe(e,t,n,r,i){if(this.aNode=e,this.owner=t,this.scope=n,this.parent=r,this.parentComponent=r.nodeType===fe.CMPT?r:r.parentComponent,this.id=o(),this.children=[],this.itemANode=k({children:e.children,props:e.props,events:e.events,tagName:e.tagName,vars:e.vars,hotspot:e.hotspot,directives:We(e.directives,{for:1})}),this.param=e.directives.for,i){var s=this;p(ne(this.param.value,this.scope,this.owner),function(e,t){var n=new Ve(s,e,t),r=Fe(s.itemANode,i,s,n);s.children.push(r)}),this._create(),Oe(this.el,i.target,i.current)}}function Ze(e){return k({children:e.children,props:e.props,events:e.events,tagName:e.tagName,vars:e.vars,hotspot:e.hotspot,directives:We(e.directives,{if:1,else:1,elif:1})})}function et(e,t,n,r,i){if(this.aNode=e,this.owner=t,this.scope=n,this.parent=r,this.parentComponent=r.nodeType===fe.CMPT?r:r.parentComponent,this.id=o(),this.children=[],this.cond=this.aNode.directives.if.value,i){if(ne(this.cond,this.scope,this.owner))this.elseIndex=-1,this.children[0]=Fe(Ze(e),i,this);else{var s=this;p(e.elses,function(e,t){var n=e.directives.elif;if(!n||n&&ne(n.value,s.scope,s.owner))return s.elseIndex=t,s.children[0]=Fe(Ze(e),i,s),!1})}this._create(),Oe(this.el,i.target,i.current)}}function tt(e,t,n,r,i){if(this.aNode=e,this.owner=t,this.scope=n,this.parent=r,this.parentComponent=r.nodeType===fe.CMPT?r:r.parentComponent,this.id=o(),this.lifeCycle=ue.start,this.children=[],i){this.sel=document.createComment(this.id),Oe(this.sel,i.target,i.current);var s=this;p(this.aNode.children,function(e){s.children.push(Fe(e,i,s))}),this.el=document.createComment(this.id),Oe(this.el,i.target,i.current),this._toPhase("attached")}}function nt(e){if(!e.aNode.directives.html){var t=new Ue(e.el);p(e.aNode.children,function(n){e.children.push(Fe(n,t,e))})}}function rt(e,t,n){var r=n.name;be(e.tagName,r).prop(e.el,t,r,e,n)}Le.prototype._update=function(e){if(!this.aNode.textExpr.value)for(var t=e?e.length:0;t--;)if(ce(e[t].expr,this.aNode.textExpr,this.scope)){var n=ne(this.aNode.textExpr,this.scope,this.owner);if(n!==this.content)if(this.content=n,this.aNode.textExpr.original){for(var r=this.sel.nextSibling,i=this.el.parentNode;r!==this.el;){var o=r;r=r.nextSibling,v(o)}ke(i);var s=document.createElement("script");i.insertBefore(s,this.el),s.insertAdjacentHTML("beforebegin",n),i.removeChild(s)}else this.el[Pe]=n;return}},Ue.prototype.goNext=function(){this.current=this.raw[++this.index],this.next=this.raw[this.index+1]},De.prototype.nodeType=fe.ELEM,De.prototype.attach=ct,De.prototype.detach=lt,De.prototype.dispose=ut,De.prototype._create=st,De.prototype._toPhase=Ye,De.prototype._onEl=ft,De.prototype._doneLeave=function(){this.leaveDispose?this.lifeCycle.disposed||xt(this,this.disposeNoDetach,this.disposeNoTransition):this.lifeCycle.attached&&(v(this.el),this._toPhase("detached"))},De.prototype._update=function(e){if(Me(e,this.aNode.hotspot.data)){var t=this.aNode.directives.bind;if(t)for(var n=e.length;n--;)if(ce(e[n].expr,t.value,this.scope)){for(var r=ne(t.value,this.scope,this.owner),i=je(r,this._spreadData),o=0;o<i.length;o++){var s=i[o],a=r[s];s in this.aNode.hotspot.props||a===this._spreadData[s]||be(this.tagName,s).prop(this.el,a,s,this)}this._spreadData=r;break}for(var c=this.aNode.hotspot.dynamicProps,p=(o=0,c.length);o<p;o++)for(var h=c[o],l=0,u=e.length;l<u;l++){var f=e[l];if(!Ee(f,this,h.name)&&(ce(f.expr,h.expr,this.scope)||h.hintExpr&&ce(f.expr,h.hintExpr,this.scope))){rt(this,ne(h.expr,this.scope,this.owner),h);break}}var d=this.aNode.directives.html;if(d){for(n=e.length;n--;)if(ce(e[n].expr,d.value,this.scope))return ke(this.el),this.el.innerHTML=ne(d.value,this.scope,this.owner),!1}else He(this,e)}},De.prototype._attached=wt,ze.prototype.nodeType=fe.SLOT,ze.prototype.dispose=function(e,t){this.childOwner=null,this.childScope=null,$e(this,e,t),Be(this)},ze.prototype.attach=Ge,ze.prototype._toPhase=Ye,ze.prototype._update=function(e,t){var n=this;if(this.nameBind&&ne(this.nameBind.expr,this.scope,this.owner)!==n.name)return this.owner._notifyNeedReload(),!1;if(t)this.isInserted&&He(this,e);else if(this.isScoped){p(this.aNode.vars,function(e){n.childScope.set(e.name,ne(e.expr,n.scope,n.owner))});var r=[];p(e,function(e){n.isInserted||r.push(e),p(n.aNode.vars,function(t){var i=t.name,o=ce(e.expr,t.expr,n.scope);o<1||(e.type!==he?r.push({type:pe,expr:P([{type:L.STRING,value:i}]),value:n.childScope.get(i),option:e.option}):2===o&&r.push({expr:P([{type:L.STRING,value:i}]),type:he,index:e.index,deleteCount:e.deleteCount,value:e.value,insertions:e.insertions,option:e.option}))})}),He(this,r)}else this.isInserted||He(this,e)},Ve.prototype.exprResolve=function(e){var t=this.directive,n=this;function r(e){return e.type===L.ACCESSOR&&e.paths[0].value===t.item.paths[0].value?P(t.value.paths.concat({type:L.NUMBER,value:n.get(t.index)},e.paths.slice(1))):e}var i=[];return p((e=r(e)).paths,function(e){i.push(e.type===L.ACCESSOR&&e.paths[0].value===t.index.paths[0].value?{type:L.NUMBER,value:n.get(t.index)}:r(e))}),P(i)},c(Ve,Ce),p(["set","remove","unshift","shift","push","pop","splice"],function(e){Ve.prototype["_"+e]=Ce.prototype[e],Ve.prototype[e]=function(t){t=this.exprResolve(H(t)),se.clear(),this.parent[e].apply(this.parent,[t].concat(Array.prototype.slice.call(arguments,1)))}}),Qe.prototype.nodeType=fe.FOR,Qe.prototype._create=Je,Qe.prototype.dispose=Xe,Qe.prototype.attach=function(e,t){this._create(),Oe(this.el,e,t);for(var n=this.el||e.firstChild,r=ne(this.param.value,this.scope,this.owner),i=r&&r.length||0,o=0;o<i;o++){var s=Ke(this,r[o],o);this.children.push(s),s.attach(e,n)}},Qe.prototype.detach=function(){this.lifeCycle.attached&&($e(this),this.children=[],v(this.el),this.lifeCycle=ue.detached)},Qe.prototype._update=function(e){var t=this,n=this.aNode.directives.transition,r=this.children.length,i=new Array(r);function o(e){for(var t=0,n=i.length;t<n;t++)(i[t]=i[t]||[]).push(e)}for(var s,a=[],c=this.el.parentNode,p=c.firstChild,h=c.lastChild,l=r>0&&p===this.children[0].el&&(h===this.el||h===this.children[r-1].el)||0===r&&p===this.el&&h===this.el,u=ne(this.param.value,this.scope,this.owner),f=u&&u.length||0,d=0,v=e.length;d<v;d++){var m=e[d],y=ce(m.expr,this.param.value,this.scope);if(y){if(y>2){var g=m.expr.paths,w=this.param.value.paths.length,x=+ne(g[w],this.scope,this.owner);isNaN(x)?o(m):(m={type:m.type,expr:P(this.param.item.paths.concat(g.slice(w+1))),value:m.value,index:m.index,deleteCount:m.deleteCount,insertions:m.insertions,option:m.option},(i[x]=i[x]||[]).push(m),this.children[x]&&(m.type===he?this.children[x].scope._splice(m.expr,[].concat(m.index,m.deleteCount,m.insertions),{silent:1}):this.children[x].scope._set(m.expr,m.value,{silent:1})))}else if(m.type!==he){r>f&&(a=a.concat(this.children.slice(f)),i=i.slice(0,f),this.children=this.children.slice(0,f));for(var N=0;N<f;N++)(i[N]=i[N]||[]).push({type:pe,option:m.option,expr:P(this.param.item.paths.slice(0)),value:u[N]}),y<2&&i[N].push(m),this.children[N]?this.children[N].scope._set(this.param.item,u[N],{silent:1}):this.children[N]=0;s=1}else if(2===y&&m.type===he&&!s){var b=m.index,E=m.deleteCount,R=m.insertions.length,C=R-E;if(C){var T={type:pe,option:m.option,expr:this.param.index};for(N=b+E;N<this.children.length;N++)(i[N]=i[N]||[]).push(T),this.children[N]&&this.children[N].scope._set(T.expr,N-E+R,{silent:1})}for(var _=E;_--;){if(_<R)(i[N=b+_]=i[N]||[]).push({type:pe,option:m.option,expr:P(this.param.item.paths.slice(0)),value:m.insertions[_]}),this.children[N]&&this.children[N].scope._set(this.param.item,m.insertions[_],{silent:1})}if(C<0)a=a.concat(this.children.splice(b+R,-C)),i.splice(b+R,-C);else if(C>0){var S=[b+E,0].concat(new Array(C));this.children.splice.apply(this.children,S),i.splice.apply(i,S)}}}else o(m)}var A=this.children.length;if(A!==r){var O={type:pe,option:{},expr:P(this.param.value.paths.concat({type:L.STRING,value:"length"}))};Me([O],this.aNode.hotspot.data)&&o(O)}this._doCreateAndUpdate=D;var k=!n&&l&&0===A,I=0;for(N=0;N<a.length;N++){var j=a[N];j?(j._ondisposed=U,j.dispose(k,k)):U()}if(k){var M=c.cloneNode(!1);c.parentNode.replaceChild(M,c),this.el=document.createComment(this.id),M.appendChild(this.el)}function U(){++I===a.length&&D===t._doCreateAndUpdate&&D()}function D(){if(t._doCreateAndUpdate=null,!k){var e=t.el;if(0===r&&l)for(var n=0;n<A;n++)t.children[n]=Ke(t,u[n],n),t.children[n].attach(c,e);else{var o=-1;for(n=0;n<A;n++){var s=t.children[n];if(s)i[n]&&s._update(i[n]);else{if(o<n)for(o=n+1,e=null;o<A;){var a=t.children[o];if(a){e=a.sel||a.el;break}o++}t.children[n]=Ke(t,u[n],n),t.children[n].attach(c,e||t.el)}}}}}0===a.length&&D()},et.prototype.nodeType=fe.IF,et.prototype._create=Je,et.prototype.dispose=Xe,et.prototype.attach=function(e,t){var n,r,i=this;ne(this.cond,this.scope,this.owner)?(r=qe(Ze(i.aNode),i),n=-1):p(i.aNode.elses,function(e,t){var o=e.directives.elif;if(!o||o&&ne(o.value,i.scope,i.owner))return r=qe(Ze(e),i),n=t,!1}),r&&(i.children[0]=r,r.attach(e,t),i.elseIndex=n),this._create(),Oe(this.el,e,t)},et.prototype._update=function(e){var t,n=this,r=n.aNode;if(ne(this.cond,this.scope,this.owner)?t=-1:p(n.aNode.elses,function(e,i){var o=e.directives.elif;if(o&&ne(o.value,n.scope,n.owner)||!o)return t=i,r=e,!1}),t===n.elseIndex)He(n,e);else{var i=n.children[0];n.children=[],i?(i._ondisposed=o,i.dispose()):o(),n.elseIndex=t}function o(){if(void 0!==t){var e=qe(Ze(r),n);e.attach(n.el.parentNode,n.el),n.children[0]=e}}},tt.prototype.nodeType=fe.TPL,tt.prototype.attach=Ge,tt.prototype.dispose=function(e,t){$e(this,e,t),Be(this)},tt.prototype._toPhase=Ye,tt.prototype._update=function(e){He(this,e)};var it,ot={class:1,style:1,id:1};function st(){if(!this.lifeCycle.created){var e=this.nodeType===fe.CMPT,t=this.aNode.hotspot.sourceNode,n=this.aNode.props;for(var r in t?(this.el=t.cloneNode(),n=this.aNode.hotspot.dynamicProps):this.el=d(this.tagName),this._spreadData)be(this.tagName,r).prop(this.el,this._spreadData[r],r,this);for(var i=0,o=n.length;i<o;i++){var s=n[i],a=e?ne(s.expr,this.data,this):ne(s.expr,this.scope,this.owner);!a&&ot[s.name]||rt(this,a,s)}this._toPhase("created")}}function at(e,t,n){if(e._create(),Oe(e.el,t,n),!e._contentReady){var r=e.aNode.directives.html;if(r)e.el.innerHTML=ne(r.value,e.scope,e.owner);else for(var i=e.aNode.children,o=0;o<i.length;o++){var s=qe(i[o],e);e.children.push(s),s.attach(e.el)}e._contentReady=1}}function ct(e,t){this.lifeCycle.attached||(at(this,e,t),this._attached())}function pt(e){var t,n=e.nodeType===fe.CMPT?e.givenANode:e.aNode,r=n&&n.directives.transition,i=e.owner;return r&&i&&"function"==typeof(t=Re(i,r.value.name))&&(t=t.apply(i,re(r.value.args,e.scope,i))),t||e.transition}function ht(e){if(!e.lifeCycle.leaving)if(e.disposeNoTransition)e._doneLeave();else{var t=pt(e);t&&t.leave?(e._toPhase("leaving"),t.leave(e.el,function(){e._doneLeave()})):e._doneLeave()}}function lt(){ht(this)}function ut(e,t){this.leaveDispose=1,this.disposeNoDetach=e,this.disposeNoTransition=t,ht(this)}function ft(e,t,n){"function"==typeof t&&(n=!!n,this._elFns.push([e,t,n]),l(this.el,e,t,n))}function dt(e,t){var n=!0,r=t;if(p(e.expr.name.paths,function(e){return!!e.value&&(r=r[e.value],n=!!r)}),!n){var i=[];p(e.expr.name.paths,function(e){i.push(e.value)});var o="[SAN WARNING] "+e.name+' listen fail,"'+i.join(".")+'" not exist';if("object"!=typeof console||!console.warn)throw new Error(o);console.warn(o)}}function vt(){this.composing&&(this.composing=0,E(this,"input"))}function mt(){this.composing=1}function yt(e,t){be(this.tagName,e.name).output(this,e,t)}function gt(e,t,n){var r=h(yt,e,t,n);return function(e){this.composing||r(e)}}function wt(){this._toPhase("created");for(var e=this.nodeType===fe.CMPT,t=e?this.data:this.scope,n=this.aNode.hotspot.xProps,r=0,i=n.length;r<i;r++){var o=n[r];switch(o.name){case"value":switch(this.tagName){case"input":case"textarea":Ae&&window.CompositionEvent&&(this._onEl("change",vt),this._onEl("compositionstart",mt),this._onEl("compositionend",vt)),this._onEl("oninput"in this.el?"input":"propertychange",gt(this,o,t));break;case"select":this._onEl("change",h(yt,this,o,t))}break;case"checked":switch(this.tagName){case"input":switch(this.el.type){case"checkbox":case"radio":this._onEl("click",h(yt,this,o,t))}}}}var a=e?this.aNode.events.concat(this.nativeEvents):this.aNode.events;for(r=0,i=a.length;r<i;r++){var c=a[r],p=e?this:this.owner;c.modifier.native&&(p=p.owner,t=this.scope||p.data),dt(c,p),this._onEl(c.name,h(_e,p,c,0,t),c.modifier.capture)}if(this._toPhase("attached"),this._isInitFromEl)this._isInitFromEl=!1;else{var l=pt(this);l&&l.enter&&l.enter(this.el,s)}}function xt(e){$e(e,1,1);for(var t,n,r,i,o=e._elFns.length;o--;){var s=e._elFns[o];t=e.el,n=s[0],r=s[1],i=s[2],t.addEventListener?t.removeEventListener(n,r,i):t.detachEvent("on"+n,r)}e._elFns=null,e.disposeNoDetach&&e.parent||v(e.el),e._toPhase&&e._toPhase("detached"),e._spreadData=null,Be(e)}function Nt(e){e.tagName=e.tagName||e.aNode.tagName||"div",b&&e.tagName.indexOf("-")>0&&(e.tagName="div")}function bt(e,t){Ae&&it&&it.debug&&window.__san_devtool__&&window.__san_devtool__.emit(e,t)}function Et(e){e=e||{},this.lifeCycle=ue.start,this.children=[],this._elFns=[],this.listeners={},this.slotChildren=[];var t=this.constructor;this.filters=this.filters||t.filters||{},this.computed=this.computed||t.computed||{},this.messages=this.messages||t.messages||{},this.subTag=e.subTag,Ct(t),function(e){var t=[];function n(e,n){var r=t.length;p(t,function(t,i){n&&i===r-1||p(e,function(e){t.hotspot.data[e]=1})})}!function e(r){if(!r.hotspot){if(t.push(r),r.textExpr)r.hotspot={data:{}},n(Tt(r.textExpr));else{var i;for(var o in Ae&&r.tagName&&!/^(template|slot|select|input|option)$/i.test(r.tagName)&&(i=d(r.tagName)),r.hotspot={data:{},dynamicProps:[],xProps:[],props:{},sourceNode:i},p(r.vars,function(e){n(Tt(e.expr))}),p(r.props,function(e){n(Tt(e.expr))}),r.directives){var s=r.directives[o];n(Tt(s.value),!/^(html|bind)$/.test(o))}if(p(r.elses,function(t){e(t)}),p(r.children,function(t){e(t)}),p(r.props,function(e,t){r.hotspot.props[e.name]=t,"id"===e.name?(e.id=!0,r.hotspot.idProp=e,r.hotspot.dynamicProps.push(e)):null!=e.expr.value?i&&be(r.tagName,e.name).prop(i,e.expr.value,e.name,r):(e.x&&r.hotspot.xProps.push(e),r.hotspot.dynamicProps.push(e))}),"option"===r.tagName&&!de(r,"value")&&r.children[0]){var a={name:"value",expr:r.children[0].textExpr};r.props.push(a),r.hotspot.dynamicProps.push(a),r.hotspot.props.value=r.props.length-1}}t.pop()}}(e.prototype.aNode)}(t);var n=this,r=t.prototype.aNode;n.givenANode=e.aNode,n.givenNamedSlotBinds=[],n.givenSlots={named:{}},this.owner=e.owner,this.scope=e.scope,this.el=e.el;var i,s,c=e.parent;if(c&&(this.parent=c,this.parentComponent=c.nodeType===fe.CMPT?c:c&&c.parentComponent),this.id=o(),this.el){var l=this.el.firstChild;if(3===l.nodeType&&(l=l.nextSibling),l&&8===l.nodeType){var u=l.data.match(/^\s*s-data:([\s\S]+)?$/);if(u){var f=u[1];e.data=new Function("return "+f.replace(/^[\s\n]*/,""))(),l.previousSibling&&v(l.previousSibling),v(l)}}}this.nativeEvents=[],this.givenANode&&(this._createGivenSlots(),p(this.givenANode.events,function(t){t.modifier.native?n.nativeEvents.push(t):(dt(t,e.owner),n.on(t.name,h(_e,e.owner,t,1,e.scope),t))}),this.tagName=r.tagName||n.givenANode.tagName,this.binds=(i=this.givenANode.props,s=[],p(i,function(e){s.push({name:I(e.name),expr:e.expr,x:e.x,raw:e.raw})}),s),this.givenANode.directives.bind&&this.scope&&(this._spreadData=ne(this.givenANode.directives.bind.value,this.scope,this.owner))),this._toPhase("compiled"),this.data=new Ce(a("function"==typeof this.initData&&this.initData()||{},e.data||this._spreadData)),Nt(this),p(this.binds,function(e){if(V(e),n.scope){var t=ne(e.expr,n.scope,n.owner);void 0!==t&&n.data.set(e.name,t)}});var m=this.dataTypes||t.dataTypes;if(m){var y=function(e,t){return function(n){for(var r in e)if(e.hasOwnProperty(r)){var i=e[r];if("function"!=typeof i)throw new Error("[SAN ERROR] "+t+":"+r+" is invalid; it must be a function, usually from san.DataTypes");i(n,r,t,r)}}}(m,this.subTag||this.name||t.name);this.data.setTypeChecker(y),this.data.checkDataTypes()}for(var g in this.computedDeps={},this.computed)this.computedDeps[g]||this._calcComputed(g);this.dataChanger||(this.dataChanger=h(this._dataChanger,this),this.data.listen(this.dataChanger)),this._toPhase("inited"),this.el&&(nt(this),this._attached());var w=e.reverseWalker;if(w){var x=w.current;x&&1===x.nodeType&&(this.el=x,w.goNext()),nt(this),this._attached()}}function Rt(e){if("function"==typeof e)return e;if("object"!=typeof e)throw new Error("[SAN FATAL] param must be a plain object.");function t(e){Et.call(this,e)}return t.prototype=e,c(t,Et),t}function Ct(e){var t=e.prototype;if(!t.hasOwnProperty("_cmptReady")){t.components=e.components||t.components||{};var n=t.components;for(var r in n){var i=n[r];"object"==typeof i?n[r]=Rt(i):"self"===i&&(n[r]=e)}t._cmptReady=1}if(!t.hasOwnProperty("aNode")){t.aNode=k();var o=e.template||t.template;if(o){var s=ee(o,{trimWhitespace:t.trimWhitespace||e.trimWhitespace,delimiters:t.delimiters||e.delimiters}),a=s.children[0];if(1!==s.children.length||a.textExpr)throw new Error("[SAN FATAL] template must have a root element.");t.aNode=a,"template"===a.tagName&&(a.tagName=null);for(var c={class:{name:"class",expr:X('{{class | _class | _sep(" ")}}')},style:{name:"style",expr:X('{{style | _style | _sep(";")}}')},id:{name:"id",expr:X("{{id}}")}},p=a.props.length;p--;){var h=a.props[p],l=c[h.name];l&&(a.props.splice(p,1),c[h.name]=h,"id"!==h.name&&(h.expr.segs.push(l.expr.segs[0]),h.expr.value=null))}a.props.push(c.class,c.style,c.id)}}}function Tt(e){var t=[];function n(e){p(e,function(e){t=t.concat(Tt(e))})}switch(e.type){case L.ACCESSOR:var r=e.paths;t.push(r[0].value),r.length>1&&t.push(r[0].value+"."+(r[1].value||"*")),n(r.slice(1));break;case L.UNARY:return Tt(e.expr);case L.TEXT:case L.BINARY:case L.TERTIARY:n(e.segs);break;case L.INTERP:t=Tt(e.expr),p(e.filters,function(e){n(e.name.paths),n(e.args)})}return t}bt.start=function(e){it=e,bt("san",e)},Et.prototype.getComponentType=function(e){return this.components[e.tagName]},Et.prototype._createGivenSlots=function(){var e=this;e.givenSlots.named={},e.givenANode&&e.scope&&p(e.givenANode.children,function(t){var n,r=!t.textExpr&&de(t,"slot");if(r){!e.givenSlotInited&&e.givenNamedSlotBinds.push(r);var i=ne(r.expr,e.scope,e.owner);(n=e.givenSlots.named[i])||(n=e.givenSlots.named[i]=[])}else e.givenSlotInited||(n=e.givenSlots.noname)||(n=e.givenSlots.noname=[]);n&&n.push(t)}),e.givenSlotInited=!0},Et.prototype.nodeType=fe.CMPT,Et.prototype.nextTick=w,Et.prototype._callHook=Et.prototype._toPhase=function(e){this.lifeCycle[e]||(this.lifeCycle=ue[e]||this.lifeCycle,"function"==typeof this[e]&&this[e](),this["_after"+e]=1,bt("comp-"+e,this))},Et.prototype.on=function(e,t,n){"function"==typeof t&&(this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push({fn:t,declaration:n}))},Et.prototype.un=function(e,t){for(var n=this.listeners[e],r=n&&n.length;r--;)t&&t!==n[r].fn||n.splice(r,1)},Et.prototype.fire=function(e,t){var n=this;p(this.listeners[e],function(e){e.fn.call(n,t)})},Et.prototype._calcComputed=function(e){var t=this.computedDeps[e];t||(t=this.computedDeps[e]={}),this.data.set(e,this.computed[e].call({data:{get:h(function(n){if(!n)throw new Error("[SAN ERROR] call get method in computed need argument");return t[n]||(t[n]=1,this.computed[n]&&this._calcComputed(n),this.watch(n,function(){this._calcComputed(e)})),this.data.get(n)},this)}}))},Et.prototype.dispatch=function(e,t){for(var n=this.parentComponent;n;){var r=n.messages[e]||n.messages["*"];if("function"==typeof r){r.call(n,{target:this,value:t,name:e});break}n=n.parentComponent}},Et.prototype.slot=function(e){var t=[],n=this;return function r(i){p(i,function(i){i.nodeType===fe.SLOT&&i.owner===n?(i.isNamed&&i.name===e||!i.isNamed&&!e)&&t.push(i):r(i.children)})}(this.children),t},Et.prototype.ref=function(e){var t,n=this;function r(i){p(i,function(i){return function(i){if(i.nodeType===fe.TEXT)return;if(i.owner===n){var o;switch(i.nodeType){case fe.ELEM:(o=i.aNode.directives.ref)&&ne(o.value,i.scope,n)===e&&(t=i.el);break;case fe.CMPT:(o=i.givenANode.directives.ref)&&ne(o.value,i.scope,n)===e&&(t=i)}!t&&r(i.slotChildren)}!t&&r(i.children)}(i),!t})}return r(this.children),t},Et.prototype._update=function(e){if(!this.lifeCycle.disposed){var t=this,n=!1;if(this._notifyNeedReload=function(){n=!0},e){var r=this.givenANode.directives.bind;if(r)for(var i=e.length;i--;)if(ce(e[i].expr,r.value,this.scope)){for(var o=ne(r.value,this.scope,this.owner),s=je(o,this._spreadData),a=0,c=s.length;a<c;a++){var h=s[a];h in this.givenANode.hotspot.props||o[h]===this._spreadData[h]||t.data.set(h,o[h],{target:{id:t.owner.id}})}this._spreadData=o;break}if(p(e,function(e){var r=e.expr;p(t.binds,function(n){var i,o=n.name,s=n.expr;!Ee(e,t,o)&&(i=ce(r,s,t.scope))&&(i>2&&(o=P([{type:L.STRING,value:o}].concat(r.paths.slice(s.paths.length))),s=r),t.data.set(o,ne(s,t.scope,t.owner),{target:{id:t.owner.id}}))}),p(t.givenNamedSlotBinds,function(e){return!(n=n||ce(r,e.expr,t.scope))})}),n)this._createGivenSlots(),this._repaintChildren();else for(var l=this.slotChildren.length;l--;){var u=this.slotChildren[l];u.lifeCycle.disposed?this.slotChildren.splice(l,1):u.isInserted&&u._update(e,1)}}var f=this.dataChanges;f&&(this.dataChanges=null,p(this.aNode.hotspot.dynamicProps,function(e){p(f,function(n){if(ce(n.expr,e.expr,t.data)||e.hintExpr&&ce(n.expr,e.hintExpr,t.data))return rt(t,ne(e.expr,t.data,t),e),!1})}),He(this,f),n&&(this._createGivenSlots(),this._repaintChildren()),this._toPhase("updated"),this.owner&&(this._updateBindxOwner(f),this.owner._update())),this._notifyNeedReload=null}},Et.prototype._updateBindxOwner=function(e){var t=this;this.owner&&p(e,function(e){p(t.binds,function(n){var r=e.expr;if(n.x&&!Ee(e,t.owner)&&ce(r,H(n.name),t.data)){var i=n.expr;r.paths.length>1&&(i=P(n.expr.paths.concat(r.paths.slice(1)))),t.scope.set(i,ne(r,t.data,t),{target:{id:t.id,prop:n.name}})}})})},Et.prototype._repaintChildren=function(){$e(this,0,1),this.children=[],this._contentReady=0,this.slotChildren=[],at(this)},Et.prototype._dataChanger=function(e){this.lifeCycle.created&&this._aftercreated?(this.dataChanges||(w(this._update,this),this.dataChanges=[]),this.dataChanges.push(e)):this.lifeCycle.inited&&this.owner&&this._updateBindxOwner([e])},Et.prototype.watch=function(e,t){var n=H(e);this.data.listen(h(function(e){ce(e.expr,n,this.data)&&t.call(this,ne(n,this.data,this),e)},this))},Et.prototype.dispose=ut,Et.prototype._doneLeave=function(){this.leaveDispose?this.lifeCycle.disposed||(this.slotChildren=null,this.data.unlisten(),this.dataChanger=null,this.dataChanges=null,xt(this,this.disposeNoDetach,this.disposeNoTransition),this.listeners=null,this.givenANode=null,this.givenSlots=null,this.givenNamedSlotBinds=null):this.lifeCycle.attached&&(v(this.el),this._toPhase("detached"))},Et.prototype._attached=wt,Et.prototype.attach=ct,Et.prototype.detach=lt,Et.prototype._create=st,Et.prototype._onEl=ft;var _t={version:"3.5.9",debug:!0,Component:Et,defineComponent:Rt,compileComponent:Ct,parseTemplate:ee,parseExpr:H,ExprType:L,LifeCycle:ue,NodeType:fe,nextTick:w,Data:Ce,evalExpr:ne,inherits:c,DataTypes:A};e.exports=_t,bt.start(_t)}()}).call(this,n(13).setImmediate)},function(e,t,n){var r,i,o={};n(10),(r=n(5))&&r.__esModule&&Object.keys(r).length>1&&console.warn("[san-loader] src/demo.san: named exports in *.san files are ignored."),i=n(4);var s={};r&&(s=r.__esModule?r.default:r),i&&(s.template=i);var a=n(2).defineComponent(s);e.exports=a,e.exports.__esModule&&(e.exports=e.exports.default),a.computed||(a.computed={}),Object.keys(o).forEach(function(e){var t=o[e];a.computed[e]=function(){return t}})},function(e,t){e.exports='\n<div class="hello">hello {{msg}} </div>\n'},function(e,t,n){"use strict";n.r(t),t.default={initData:()=>({msg:"Hi"})}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var i,o=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?e:(i=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(e,t,n){var r,i,o={},s=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),a=function(e){var t={};return function(e){if("function"==typeof e)return e();if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),c=null,p=0,h=[],l=n(6);function u(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=o[r.id];if(i){i.refs++;for(var s=0;s<i.parts.length;s++)i.parts[s](r.parts[s]);for(;s<r.parts.length;s++)i.parts.push(g(r.parts[s],t))}else{var a=[];for(s=0;s<r.parts.length;s++)a.push(g(r.parts[s],t));o[r.id]={id:r.id,refs:1,parts:a}}}}function f(e,t){for(var n=[],r={},i=0;i<e.length;i++){var o=e[i],s=t.base?o[0]+t.base:o[0],a={css:o[1],media:o[2],sourceMap:o[3]};r[s]?r[s].parts.push(a):n.push(r[s]={id:s,parts:[a]})}return n}function d(e,t){var n=a(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=h[h.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),h.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=a(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,i)}}function v(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=h.indexOf(e);t>=0&&h.splice(t,1)}function m(e){var t=document.createElement("style");return void 0===e.attrs.type&&(e.attrs.type="text/css"),y(t,e.attrs),d(e,t),t}function y(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function g(e,t){var n,r,i,o;if(t.transform&&e.css){if(!(o=t.transform(e.css)))return function(){};e.css=o}if(t.singleton){var s=p++;n=c||(c=m(t)),r=N.bind(null,n,s,!1),i=N.bind(null,n,s,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",y(t,e.attrs),d(e,t),t}(t),r=function(e,t,n){var r=n.css,i=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&i;(t.convertToAbsoluteUrls||o)&&(r=l(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var s=new Blob([r],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,n,t),i=function(){v(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),i=function(){v(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=s()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=f(e,t);return u(n,t),function(e){for(var r=[],i=0;i<n.length;i++){var s=n[i];(a=o[s.id]).refs--,r.push(a)}e&&u(f(e,t),t);for(i=0;i<r.length;i++){var a;if(0===(a=r[i]).refs){for(var c=0;c<a.parts.length;c++)a.parts[c]();delete o[a.id]}}}};var w,x=(w=[],function(e,t){return w[e]=t,w.filter(Boolean).join("\n")});function N(e,t,n,r){var i=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=x(t,i);else{var o=document.createTextNode(i),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(o,s[t]):e.appendChild(o)}}},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(s=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),o=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(o).concat([i]).join("\n")}var s;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(r[o]=!0)}for(i=0;i<e.length;i++){var s=e[i];"number"==typeof s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),t.push(s))}},t}},function(e,t,n){(e.exports=n(8)(!0)).push([e.i,"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.hello {\n  color: red;\n}\n","",{version:3,sources:["/home/shimeng/Documents/ife2018/mvvm/00webpack/src/demo.san?3cf7f6ca"],names:[],mappings:";;;;;;;;;;;;;;;AAeA;EACA,WAAA;CACA",file:"demo.san",sourcesContent:['<template>\n  <div class="hello">hello {{msg}} </div>\n</template>\n\n<script>\n  export default {\n    initData() {\n      return {\n        msg: "Hi",\n      };\n    }\n  }\n<\/script>\n\n<style>\n  .hello {\n    color: red;\n  }\n</style>\n\n'],sourceRoot:""}])},function(e,t,n){var r=n(9);"string"==typeof r&&(r=[[e.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(7)(r,i);r.locals&&(e.exports=r.locals)},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(e){r=s}}();var c,p=[],h=!1,l=-1;function u(){h&&c&&(h=!1,c.length?p=c.concat(p):l=-1,p.length&&f())}function f(){if(!h){var e=a(u);h=!0;for(var t=p.length;t;){for(c=p,p=[];++l<t;)c&&c[l].run();l=-1,t=p.length}c=null,h=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function v(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];p.push(new d(e,t)),1!==p.length||h||a(f)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,i,o,s,a,c=1,p={},h=!1,l=e.document,u=Object.getPrototypeOf&&Object.getPrototypeOf(e);u=u&&u.setTimeout?u:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick(function(){d(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){d(e.data)},r=function(e){o.port2.postMessage(e)}):l&&"onreadystatechange"in l.createElement("script")?(i=l.documentElement,r=function(e){var t=l.createElement("script");t.onreadystatechange=function(){d(e),t.onreadystatechange=null,i.removeChild(t),t=null},i.appendChild(t)}):r=function(e){setTimeout(d,0,e)}:(s="setImmediate$"+Math.random()+"$",a=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(s)&&d(+t.data.slice(s.length))},e.addEventListener?e.addEventListener("message",a,!1):e.attachEvent("onmessage",a),r=function(t){e.postMessage(s+t,"*")}),u.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var i={callback:e,args:t};return p[c]=i,r(c),c++},u.clearImmediate=f}function f(e){delete p[e]}function d(e){if(h)setTimeout(d,0,e);else{var t=p[e];if(t){h=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}(t)}finally{f(e),h=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(1),n(11))},function(e,t,n){(function(e){var r=void 0!==e&&e||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},t.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(12),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(1))},function(e,t,n){"use strict";n.r(t);n(2);var r=n(0),i=n(3),o=n.n(i);console.log("Hello world!"),r.router.add({rule:"/",Component:o.a,target:"#app"}),r.router.start()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,